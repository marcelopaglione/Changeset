/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package changeset;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

import java.lang.reflect.Field;

import org.junit.Test;

import changeset.entity.ExampleEntity;

public class UtilsTest {

	@Test
	public void maxValue() {
		assertThat(Utils.MAX, is(30));
	}

	@Test
	public void validateStringSize() {
		String testChar = " ";
		StringBuilder input = new StringBuilder();

		for (int i = 0; i < 30; i++) {
			input.append(testChar);
			Utils.checkMaxStringSize(input.toString());
		}

		assertThat(input.toString().length(), is(30));

		input.append(testChar);
		Utils.checkMaxStringSize(input.toString());
		assertTrue(CreateChangeLog.warnings.size() > 0);

	}

	@Test
	public void lowerCase() {
		assertThat(Utils.toLower("ABC123"), equalTo("abc123"));
	}

	@Test
	public void isPk() throws NoSuchFieldException, SecurityException {
		assertTrue(Utils.isPk(getField("isId")));
		assertFalse(Utils.isPk(getField("isNotId")));
	}

	@Test
	public void isNotNull() throws NoSuchFieldException, SecurityException {
		assertTrue(Utils.isNotNull(getField("isNotNull")));
		assertFalse(Utils.isNotNull(getField("isNotNotNull")));
	}

	@Test
	public void isColumn() throws NoSuchFieldException, SecurityException {
		Field column = getField("isColumn");
		assertTrue(Utils.isColumn(column));
		assertThat(Utils.getColumnName(column), equalTo("column_name"));
		assertFalse(Utils.isColumn(getField("isNotColumn")));
	}

	@Test
	public void isTable() throws NoSuchFieldException, SecurityException {
		ExampleEntity exampleEntity = new ExampleEntity();
		assertThat(Utils.getTableName(exampleEntity.getClass()), equalTo("table_name"));
	}

	@Test(expected = RuntimeException.class)
	public void isJoinColumn() throws NoSuchFieldException, SecurityException {
		Field joinColumn = getField("isJoinColumn");
		assertThat(joinColumn, notNullValue());
		assertThat(Utils.getColumnName(joinColumn), equalTo("is_join_column"));

		joinColumn = getField("isNotJoinColumn");
		assertThat(joinColumn, notNullValue());
		Utils.getJoinColumnName(joinColumn);
	}

	@Test
	public void getColumnSize() throws NoSuchFieldException {
		Field field = getField("predeterminedSize");
		assertTrue(Utils.isColumn(field));
		assertThat(Utils.getColumnName(field), equalTo("predetermined_size"));
		assertThat(Utils.getColumnSize(field), is(60));

		field = getField("noSize");
		assertTrue(Utils.isColumn(field));
		assertThat(Utils.getColumnName(field), equalTo("no_size_name"));
		assertThat(Utils.getColumnSize(field), is(255));
	}

	@Test
	public void addUnderscore() {
		String value = Utils.addUnderscore("nameNameNameName");
		assertThat(value, notNullValue());
		assertThat(value, equalTo("name_name_name_name"));

		value = Utils.addUnderscore("id_name");
		assertThat(value, notNullValue());
		assertThat(value, equalTo("id_name"));

		value = Utils.addUnderscore("");
		assertThat(value, notNullValue());
		assertThat(value, equalTo(""));
	}

	private Field getField(String name) throws NoSuchFieldException {
		return new ExampleEntity().getClass().getDeclaredField(name);
	}

}
